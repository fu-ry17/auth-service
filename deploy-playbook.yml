---
- hosts: dev
  become: true
  vars:
    workspace_dir: "{{ workspace_dir }}"
    remote_workspace: "/opt/jenkins/workspace/auth-service"
    docker_registry: "{{ docker_registry }}"
    helm_repo: "{{ helm_repo }}"
    k8s_env: "{{ k8s_env }}"
    k8s_secret: "{{ k8s_secret }}"
    k8s_api: "{{ k8s_api }}"
    branch_name: "{{ branch_name }}"
    sonar_token: "{{ sonar_token }}"
    sonar_url: "{{ sonar_url }}"
    project_key: "{{ project_key }}"

  tasks:
    - name: Create and sync workspace
      block:
        - name: Create remote workspace directory
          file:
            path: "{{ remote_workspace }}"
            state: directory
            mode: '0755'

        - name: Synchronize workspace
          synchronize:
            src: "{{ workspace_dir }}/"
            dest: "{{ remote_workspace }}"
            rsync_opts:
              - "--exclude=.git"
          become: no

    - name: Run unit tests
      block:
        - name: Execute Gradle tests
          shell: |
            chmod +x gradlew
            ./gradlew clean test --build-cache
          args:
            chdir: "{{ remote_workspace }}"
          register: test_result
          failed_when: test_result.rc != 0

    - name: Set version and image info
      block:
        - name: Get application version
          shell: |
            ./gradlew properties -q | grep '^version:' | grep -v 'kotlin.version:' | awk '{print $2}'
          args:
            chdir: "{{ remote_workspace }}"
          register: version_result

        - name: Get chart name
          shell: |
            docker run -v {{ remote_workspace }}:/app -w /app dtzar/helm-kubectl helm show chart ./charts | grep name | cut -d: -f 2 | tr -d ' '
          register: chart_name_result

        - name: Set image facts
          set_fact:
            app_version: "{{ version_result.stdout | trim }}"
            app_name: "{{ chart_name_result.stdout | trim }}-{{ k8s_env }}"
            chart_name: "{{ chart_name_result.stdout | trim }}"

    - name: Build and push Docker image
      block:
        - name: Login to Docker registry
          shell: |
            docker login {{ docker_registry }} -u {{ docker_user }} -p {{ docker_pass }}
          no_log: true

        - name: Build Docker image
          shell: |
            docker build \
              -t {{ docker_registry }}/{{ app_name }}:{{ app_version }} \
              -t {{ docker_registry }}/{{ app_name }}:latest \
              {{ remote_workspace }}

        - name: Push Docker images
          shell: |
            docker push {{ docker_registry }}/{{ app_name }}:{{ app_version }}
            docker push {{ docker_registry }}/{{ app_name }}:latest

    - name: Package and push Helm chart
      block:
        - name: Package Helm chart
          shell: |
            sudo helm package charts/ --app-version {{ app_version }} --version {{ app_version }}
          args:
            chdir: "{{ remote_workspace }}"

        - name: Push Helm chart
          shell: |
            curl -u {{ docker_user }}:{{ docker_pass }} {{ helm_repo }} --upload-file {{ chart_name }}-{{ app_version }}.tgz -v
          args:
            chdir: "{{ remote_workspace }}"

    - name: Deploy to environment
      block:
        - name: Deploy to non-prod environment
          when: k8s_env != 'prod'
          shell: |
            {% if k8s_env == 'dev' %}
            ssh ubuntu@10.0.3.74 'cd /home/ubuntu/agencify-backend && git fetch && git checkout {{ branch_name }} && git pull origin {{ branch_name }} --rebase && sudo docker compose up -d'
            {% elif k8s_env == 'staging' %}
            ssh ubuntu@10.0.3.85 'cd /home/ubuntu/agencify-backend && git fetch && git checkout {{ branch_name }} && git pull origin {{ branch_name }} --rebase && sudo docker compose -f staging-compose.yml up -d'
            {% endif %}

        - name: Deploy to production
          when: k8s_env == 'prod'
          shell: |
            docker run --rm \
              -v {{ remote_workspace }}:/app \
              -w /app \
              dtzar/helm-kubectl \
              helm upgrade --install \
              --set image.repository='{{ docker_registry }}/{{ app_name }}' \
              --set image.tag='{{ app_version }}' \
              --set ingress.domain='{{ k8s_domain }}' \
              --set ingress.route='{{ k8s_route }}' \
              {{ app_name }} charts/ -n {{ k8s_env }}

    - name: Run SonarQube Analysis
      block:
        - name: Execute SonarQube scan
          shell: |
            ./gradlew sonar \
              -Dsonar.host.url={{ sonar_url }} \
              -Dsonar.login={{ sonar_token }} \
              -Dsonar.projectKey={{ project_key }}
          args:
            chdir: "{{ remote_workspace }}"
          environment:
            SONAR_TOKEN: "{{ sonar_token }}"
          when: test_result.rc == 0
    
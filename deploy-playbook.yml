---
- hosts: dev
  become: true
  vars:
    workspace_dir: "{{ workspace_dir }}"
    remote_workspace: "/opt/jenkins/workspace/auth-service"
    docker_registry: "{{ docker_registry }}"
    helm_repo: "{{ helm_repo }}"
    env_type: "{{ env_type }}"
    project_key: "{{ project_key }}"
    sonar_url: "{{ sonar_url }}"
    sonar_token: "{{ sonar_token }}"

  tasks:
    - name: Print build info
      debug:
        msg: |
          Starting deployment with:
          - Environment: {{ env_type }}
          - Workspace: {{ workspace_dir }}
          - Remote workspace: {{ remote_workspace }}
          - Docker registry: {{ docker_registry }}

    - name: Create and sync workspace
      block:
        - name: Create remote workspace directory
          file:
            path: "{{ remote_workspace }}"
            state: directory
            mode: '0777'
            owner: ubuntu
            group: ubuntu
          register: workspace_create

        - name: Create build directory
          file:
            path: "{{ remote_workspace }}/build"
            state: directory
            mode: '0777'
            owner: ubuntu
            group: ubuntu
          register: build_dir_create

        - name: Show workspace creation status
          debug:
            msg: |
              Workspace status:
              - Main directory: {{ 'created' if workspace_create.changed else 'already exists' }}
              - Build directory: {{ 'created' if build_dir_create.changed else 'already exists' }}

        - name: Set workspace permissions recursively
          shell: |
            sudo chown -R ubuntu:ubuntu {{ remote_workspace }}
            sudo chmod -R 777 {{ remote_workspace }}
          register: perm_result

        - name: Show permission update status
          debug:
            msg: "Permissions updated for workspace"

        - name: Synchronize workspace
          synchronize:
            src: "{{ workspace_dir }}/"
            dest: "{{ remote_workspace }}"
            rsync_opts:
              - "--exclude=.git"
              - "--chmod=ugo=rwX"
          become: no
          register: sync_result

        - name: Show sync status
          debug:
            msg: "Workspace sync completed. Changed files: {{ sync_result.changed }}"

    - name: Run unit tests
      block:
        - name: Execute Gradle tests
          shell: |
            chmod +x gradlew
            ./gradlew clean test --build-cache
          args:
            chdir: "{{ remote_workspace }}"
          register: test_result
          failed_when: test_result.rc != 0

        - name: Show test results
          debug:
            msg: |
              Test execution completed successfully:
              {{ test_result.stdout_lines | default([]) }}
          when: test_result.rc == 0

    - name: Run SonarQube Analysis
      block:
        - name: Execute SonarQube scan
          shell: |
            echo "Starting SonarQube analysis..."
            ./gradlew sonar \
              -Dsonar.host.url={{ sonar_url }} \
              -Dsonar.token={{ sonar_token }} \
              -Dsonar.projectKey={{ project_key }}
          args:
            chdir: "{{ remote_workspace }}"
          environment:
            SONAR_TOKEN: "{{ sonar_token }}"
          register: sonar_result
          when: test_result.rc == 0

        - name: Show SonarQube analysis status
          debug:
            msg: |
              SonarQube analysis completed successfully:
              {{ sonar_result.stdout_lines | default([]) }}
          when: sonar_result.rc == 0

        - name: Show SonarQube analysis errors
          debug:
            msg: |
              SonarQube analysis failed:
              {{ sonar_result.stderr_lines | default([]) }}
          when: sonar_result is failed
          failed_when: true

    - name: Set version and image info
      block:
        - name: Get application version
          shell: |
            ./gradlew properties -q | grep '^version:' | grep -v 'kotlin.version:' | awk '{print $2}'
          args:
            chdir: "{{ remote_workspace }}"
          register: version_result

        - name: Get chart name
          shell: |
            docker run -v {{ remote_workspace }}:/app -w /app dtzar/helm-kubectl helm show chart ./charts | grep name | cut -d: -f 2 | tr -d ' '
          register: chart_name_result

        - name: Set image facts
          set_fact:
            app_version: "{{ version_result.stdout | trim }}"
            app_name: "{{ chart_name_result.stdout | trim }}-{{ env_type }}"
            chart_name: "{{ chart_name_result.stdout | trim }}"

        - name: Show build info
          debug:
            msg: |
              Build information:
              - Application version: {{ app_version }}
              - Image name: {{ app_name }}
              - Chart name: {{ chart_name }}

        - name: Create build directory on remote
          file:
            path: "{{ remote_workspace }}/build"
            state: directory
            mode: '0755'
          become: yes

        - name: Save app info on remote
          shell: |
            echo "{{ app_version }}" > {{ remote_workspace }}/build/app_version
            echo "{{ app_name }}" > {{ remote_workspace }}/build/app_name
          args:
            chdir: "{{ remote_workspace }}"

        - name: Create build directory on Jenkins
          file:
            path: "{{ workspace_dir }}/build"
            state: directory
            mode: '0755'
          delegate_to: localhost
          become: no

        - name: Copy files back to Jenkins
          fetch:
            src: "{{ remote_workspace }}/build/{{ item }}"
            dest: "{{ workspace_dir }}/build/{{ item }}"
            flat: yes
          with_items:
            - app_version
            - app_name
          become: no

        - name: Show file transfer status
          debug:
            msg: "App info files copied back to Jenkins workspace"

    - name: Build and push Docker image
      block:
        - name: Login to Docker registry
          shell: |
            docker login {{ docker_registry }} -u {{ docker_user }} -p {{ docker_pass }}
          no_log: true
          register: docker_login
          
        - name: Show Docker login status
          debug:
            msg: "Docker login successful"
          when: docker_login.rc == 0

        - name: Build and push Docker images
          shell: |
            echo "Building Docker image..."
            docker build \
              -t {{ docker_registry }}/{{ app_name }}:{{ app_version }} \
              -t {{ docker_registry }}/{{ app_name }}:latest \
              {{ remote_workspace }} && \
            echo "Pushing version {{ app_version }}..." && \
            docker push {{ docker_registry }}/{{ app_name }}:{{ app_version }} && \
            echo "Pushing latest tag..." && \
            docker push {{ docker_registry }}/{{ app_name }}:latest
          register: docker_build
          
        - name: Show Docker build status
          debug:
            msg: |
              Docker build and push completed successfully:
              {{ docker_build.stdout_lines | default([]) }}
          when: docker_build.rc == 0

        - name: Show Docker build errors
          debug:
            msg: |
              Docker build failed:
              {{ docker_build.stderr_lines | default([]) }}
          when: docker_build is failed
          failed_when: true

    - name: Package and push Helm chart
      block:
        - name: Package and push Helm chart
          shell: |
            echo "Packaging Helm chart..."
            docker run --rm \
              -v {{ remote_workspace }}:/app \
              -w /app \
              dtzar/helm-kubectl \
              helm package charts/ --app-version {{ app_version }} --version {{ app_version }} && \
            echo "Pushing Helm chart to repository..." && \
            curl -u {{ docker_user }}:{{ docker_pass }} {{ helm_repo }} --upload-file {{ chart_name }}-{{ app_version }}.tgz -v
          args:
            chdir: "{{ remote_workspace }}"
          register: helm_result

        - name: Show Helm operation status
          debug:
            msg: |
              Helm operations completed successfully:
              {{ helm_result.stdout_lines | default([]) }}
          when: helm_result.rc == 0

        - name: Show Helm operation errors
          debug:
            msg: |
              Helm operations failed:
              {{ helm_result.stderr_lines | default([]) }}
          when: helm_result is failed
          failed_when: true

  
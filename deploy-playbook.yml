---
- hosts: dev
  become: true
  vars:
    workspace_dir: "{{ workspace_dir | default(ansible_env.WORKSPACE) }}"
    gradle_image: "gradle:8.2.1-jdk17-alpine"
    kubectl_image: "dtzar/helm-kubectl"
    remote_workspace: "/opt/jenkins/workspace/auth-service"

  tasks:
    # Initial setup tasks
    - name: Install python pip
      apt:
        name: python3-pip
        state: present
        update_cache: yes
    
    - name: Install docker-py module
      apt:
        name: python3-docker
        state: present
        update_cache: yes

    - name: Install java 21
      apt:
        name: openjdk-21-jre
        state: present
        update_cache: yes

    # Create workspace directory
    - name: Ensure jenkins user exists
      user:
        name: jenkins
        state: present
        system: yes

    - name: Create remote workspace directory
      file:
        path: "{{ remote_workspace }}"
        state: directory
        mode: '0755'
        owner: jenkins
        group: jenkins
        recurse: yes

    # Copy workspace files
    - name: Synchronize workspace
      synchronize:
        src: "{{ workspace_dir }}/"
        dest: "{{ remote_workspace }}"
        rsync_opts:
          - "--exclude=.git"
      become: no  # Don't use sudo for rsync

    - name: Fix permissions after sync
      file:
        path: "{{ remote_workspace }}"
        owner: jenkins
        group: jenkins
        recurse: yes

    # Setup stage tasks
    - name: Pull Gradle Docker image
      docker_image:
        name: "{{ gradle_image }}"
        source: pull
        force_source: yes

    - name: Pull Kubectl Docker image
      docker_image:
        name: "{{ kubectl_image }}"
        source: pull
        force_source: yes

    # Unit Test stage tasks
    - name: Debug workspace directory
      debug:
        msg: "Current workspace directory: {{ remote_workspace }}"

    - name: List directory contents
      shell: "ls -la {{ remote_workspace }}"
      register: dir_contents

    - name: Debug directory contents
      debug:
        msg: "Directory contents: {{ dir_contents.stdout_lines }}"

    - name: Make gradlew executable
      file:
        path: "{{ remote_workspace }}/gradlew"
        mode: '+x'

    - name: Run Gradle tests
      command: "./gradlew clean test --build-cache"
      args:
        chdir: "{{ remote_workspace }}"
      register: test_result
      become: jenkins  # Run as jenkins user
      ignore_errors: yes

    - name: Check test results
      fail:
        msg: "Gradle tests failed: {{ test_result.stderr }}"
      when: test_result.rc != 0
    